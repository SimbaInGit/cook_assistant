"use client";

import { useState, useEffect } from 'react';
import Link from 'next/link';
import { usePathname, useRouter } from 'next/navigation';

export default function Header() {
  const [isMenuOpen, setIsMenuOpen] = useState(false);
  const [isLoggedIn, setIsLoggedIn] = useState(false);
  const pathname = usePathname();
  const router = useRouter();
  
  // 检查用户是否已登录
  useEffect(() => {
    const checkLoginStatus = async () => {
      try {
        // 检查cookie
        const cookies = document.cookie.split(';');
        const hasUserIdCookie = cookies.some(cookie => cookie.trim().startsWith('userId='));
        
        // 调用API验证登录状态
        const response = await fetch('/api/user/status', {
          credentials: 'include',
          cache: 'no-store'
        });
        
        if (response.ok) {
          const data = await response.json();
          setIsLoggedIn(data.isLoggedIn);
        } else {
          setIsLoggedIn(hasUserIdCookie);
        }
      } catch (error) {
        console.error('检查登录状态出错:', error);
      }
    };
    
    checkLoginStatus();
  }, [pathname]);
  
  // 退出登录
  const handleLogout = async () => {
    try {
      // 在客户端手动清除userId cookie
      document.cookie = 'userId=; expires=Thu, 01 Jan 1970 00:00:00 UTC; path=/;';
      
      // 清除本地存储
      try {
        localStorage.clear();
        sessionStorage.clear();
      } catch (storageErr) {
        console.error('清除存储时出错:', storageErr);
      }
      
      // 调用退出API
      const response = await fetch('/api/auth/logout', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        credentials: 'include',
      });
      
      if (response.ok) {
        const data = await response.json();
        console.log('退出成功:', data.message);
      }
    } catch (error) {
      console.error('退出请求出错:', error);
    } finally {
      // 无论成功与否，都跳转到登录页面
      window.location.href = '/auth/login';
    }
  };
  
  return (
    <header className="bg-white shadow-sm">
      <div className="container mx-auto px-4">
        <div className="flex justify-between items-center py-4">
          <Link href="/" className="flex items-center">
            <span className="text-2xl font-heading font-bold text-primary-600">Erica的孕期饮食助手</span>
          </Link>

          {/* 桌面导航 */}
          <nav className="hidden md:flex space-x-8">
            <NavLink href="/dashboard" active={pathname === '/dashboard'}>
              我的饮食计划
            </NavLink>
            <NavLink href="/recipes" active={pathname === '/recipes'}>
              菜谱库
            </NavLink>
            <NavLink href="/knowledge" active={pathname === '/knowledge'}>
              饮食知识
            </NavLink>
            <NavLink href="/profile" active={pathname === '/profile'}>
              个人档案
            </NavLink>
            
            {/* 无条件显示退出按钮 */}
            <button
              onClick={handleLogout}
              className="text-base font-medium text-red-500 hover:text-red-600 hover:underline flex items-center"
            >
              <svg className="w-4 h-4 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M17 16l4-4m0 0l-4-4m4 4H7m6 4v1a3 3 0 01-3 3H6a3 3 0 01-3-3V7a3 3 0 013-3h4a3 3 0 013 3v1"></path>
              </svg>
              退出登录
            </button>
          </nav>
          
          {/* 移动端菜单按钮 */}
          <button 
            className="md:hidden flex items-center p-2 rounded-md text-gray-600 hover:text-primary-600 hover:bg-gray-100"
            onClick={() => setIsMenuOpen(!isMenuOpen)}
          >
            <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
              {isMenuOpen ? (
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M6 18L18 6M6 6l12 12"></path>
              ) : (
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M4 6h16M4 12h16M4 18h16"></path>
              )}
            </svg>
          </button>
        </div>
        
        {/* 移动端导航菜单 */}
        {isMenuOpen && (
          <div className="md:hidden py-4 border-t border-gray-200">
            <nav className="flex flex-col space-y-3">
              <MobileNavLink href="/dashboard" active={pathname === '/dashboard'} onClick={() => setIsMenuOpen(false)}>
                我的饮食计划
              </MobileNavLink>
              <MobileNavLink href="/recipes" active={pathname === '/recipes'} onClick={() => setIsMenuOpen(false)}>
                菜谱库
              </MobileNavLink>
              <MobileNavLink href="/knowledge" active={pathname === '/knowledge'} onClick={() => setIsMenuOpen(false)}>
                饮食知识
              </MobileNavLink>
              <MobileNavLink href="/profile" active={pathname === '/profile'} onClick={() => setIsMenuOpen(false)}>
                个人档案
              </MobileNavLink>
              
              {/* 无条件显示退出按钮 */}
              <button 
                className="block px-4 py-2 rounded-md text-red-500 hover:bg-red-50 text-left w-full flex items-center"
                onClick={() => {
                  setIsMenuOpen(false);
                  handleLogout();
                }}
              >
                <svg className="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M17 16l4-4m0 0l-4-4m4 4H7m6 4v1a3 3 0 01-3 3H6a3 3 0 01-3-3V7a3 3 0 013-3h4a3 3 0 013 3v1"></path>
                </svg>
                退出登录
              </button>
            </nav>
          </div>
        )}
      </div>
    </header>
  );
}

// 桌面端导航链接组件
function NavLink({ href, active, children }) {
  return (
    <Link 
      href={href} 
      className={`text-base font-medium ${
        active 
          ? 'text-primary-600 border-b-2 border-primary-500' 
          : 'text-gray-600 hover:text-primary-600'
      }`}
    >
      {children}
    </Link>
  );
}

// 移动端导航链接组件
function MobileNavLink({ href, active, onClick, children }) {
  return (
    <Link 
      href={href} 
      className={`block px-4 py-2 rounded-md ${
        active 
          ? 'bg-primary-50 text-primary-600' 
          : 'text-gray-600 hover:bg-gray-50 hover:text-primary-600'
      }`}
      onClick={onClick}
    >
      {children}
    </Link>
  );
}
