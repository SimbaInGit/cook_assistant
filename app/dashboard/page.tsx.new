"use client";

import React, { useState, useEffect } from 'react';
import { format } from 'date-fns';
import { zhCN } from 'date-fns/locale';
import Link from 'next/link';
import Image from 'next/image';
import Header from '@/components/common/Header';
import Footer from '@/components/common/Footer';

// 定义类型
interface User {
  _id: string;
  name: string;
  email: string;
  healthInfo: {
    dueDate: string;
    currentWeek: number;
    allergies: string[];
    dislikedFoods: string[];
    healthConditions: {
      gestationalDiabetes: boolean;
      anemia: boolean;
      hypertension: boolean;
    }
  }
}

interface Ingredient {
  name: string;
  amount: string;
}

interface Nutrition {
  calories: number;
  protein: number;
  fat: number;
  carbs: number;
  fiber: number;
  calcium: number;
  iron: number;
}

interface Meal {
  name: string;
  image: string;
  ingredients: Ingredient[];
  nutrition: Nutrition;
}

interface DietPlan {
  _id?: string;
  userId?: string;
  date: string | Date;
  breakfast: Meal;
  morningSnack: Meal;
  lunch: Meal;
  afternoonSnack: Meal;
  dinner: Meal;
  nutritionSummary: Nutrition;
}

// 餐食卡片组件接口
interface MealCardProps {
  title: string;
  time: string;
  meal: Meal;
}

// 餐食卡片组件
function MealCard({ title, time, meal }: MealCardProps): React.ReactNode {
  const [showDetails, setShowDetails] = useState(false);
  
  if (!meal) return null;
  
  return (
    <div className="bg-white rounded-lg shadow-md overflow-hidden">
      {/* 餐食图片（如果有） */}
      {meal.image && (
        <div className="relative h-48 w-full">
          <Image
            src={meal.image}
            alt={meal.name}
            fill
            style={{ objectFit: "cover" }}
          />
        </div>
      )}
      
      {/* 餐食信息 */}
      <div className="p-5">
        <div className="flex justify-between items-center mb-3">
          <h3 className="text-lg font-semibold text-gray-800">{title}</h3>
          <span className="text-sm text-gray-500">{time}</span>
        </div>
        
        <h4 className="text-xl font-bold text-primary-600 mb-3">{meal.name}</h4>
        
        {/* 营养数据 */}
        <div className="flex justify-between mb-4 text-sm">
          <div>
            <span className="text-gray-500">热量:</span>
            <span className="font-medium ml-1">{meal.nutrition.calories}千卡</span>
          </div>
          <div>
            <span className="text-gray-500">蛋白质:</span>
            <span className="font-medium ml-1">{meal.nutrition.protein}g</span>
          </div>
          <div>
            <span className="text-gray-500">碳水:</span>
            <span className="font-medium ml-1">{meal.nutrition.carbs}g</span>
          </div>
        </div>
        
        {/* 详情切换按钮 */}
        <button 
          className="text-primary-600 hover:text-primary-700 text-sm font-medium flex items-center"
          onClick={() => setShowDetails(!showDetails)}
        >
          {showDetails ? '收起详情' : '查看详情'}
          <svg 
            className={`ml-1 w-4 h-4 transform ${showDetails ? 'rotate-180' : ''}`} 
            fill="none" 
            stroke="currentColor" 
            viewBox="0 0 24 24" 
            xmlns="http://www.w3.org/2000/svg"
          >
            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M19 9l-7 7-7-7"></path>
          </svg>
        </button>
        
        {/* 详细信息 */}
        {showDetails && (
          <div className="mt-4 pt-4 border-t border-gray-100">
            {/* 食材清单 */}
            <div className="mb-4">
              <h5 className="font-semibold text-gray-700 mb-2">食材:</h5>
              <ul className="space-y-1">
                {meal.ingredients.map((ingredient, index) => (
                  <li key={index} className="text-sm text-gray-600 flex justify-between">
                    <span>{ingredient.name}</span>
                    <span>{ingredient.amount}</span>
                  </li>
                ))}
              </ul>
            </div>
            
            {/* 查看完整菜谱链接 */}
            <Link 
              href={`/recipes/${encodeURIComponent(meal.name)}`}
              className="btn-outline w-full text-center text-sm"
            >
              查看完整菜谱
            </Link>
          </div>
        )}
      </div>
    </div>
  );
}

export default function Dashboard(): React.ReactNode {
  const [user, setUser] = useState<User | null>(null);
  const [dietPlan, setDietPlan] = useState<DietPlan | null>(null);
  const [isLoading, setIsLoading] = useState(true);
  const [isGenerating, setIsGenerating] = useState(false);
  const [activeTab, setActiveTab] = useState('today');
  const [error, setError] = useState<string | null>(null);
  
  // 获取用户状态和信息
  useEffect(() => {
    const fetchUserData = async () => {
      try {
        setIsLoading(true);
        
        // 获取用户状态
        const statusResponse = await fetch('/api/user/status');
        if (!statusResponse.ok) {
          throw new Error('未登录或会话已过期');
        }
        
        const statusData = await statusResponse.json();
        if (!statusData.isLoggedIn) {
          window.location.href = '/login';
          return;
        }
        
        // 获取用户信息
        const profileResponse = await fetch('/api/user/profile');
        if (!profileResponse.ok) {
          throw new Error('获取用户信息失败');
        }
        
        const profileData = await profileResponse.json();
        setUser(profileData.user);
        
        // 获取今日饮食计划
        await fetchTodayDietPlan();
        
      } catch (error) {
        console.error('获取用户数据错误:', error);
        setError(error instanceof Error ? error.message : '获取数据失败');
      } finally {
        setIsLoading(false);
      }
    };
    
    fetchUserData();
  }, []);
  
  // 获取今日饮食计划
  const fetchTodayDietPlan = async () => {
    try {
      const today = new Date().toISOString().split('T')[0];
      
      const response = await fetch(`/api/diet/plan?date=${today}`);
      
      if (response.ok) {
        const data = await response.json();
        if (data.dietPlan) {
          setDietPlan(data.dietPlan);
        }
      } else if (response.status !== 404) {
        // 404 意味着没有找到计划，这是正常的情况
        const errorData = await response.json();
        throw new Error(errorData.message || '获取饮食计划失败');
      }
    } catch (error) {
      console.error('获取饮食计划错误:', error);
      // 不设置错误状态，因为没有计划是正常的情况
    }
  };
  
  // 生成新的饮食计划
  const generateNewPlan = async () => {
    if (!user) return;
    
    setIsGenerating(true);
    setError(null);
    
    try {
      const response = await fetch('/api/diet/generate', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ userId: user._id }),
      });
      
      if (!response.ok) {
        const errorData = await response.json();
        throw new Error(errorData.message || '生成饮食计划失败');
      }
      
      const data = await response.json();
      setDietPlan(data.dietPlan);
      
    } catch (error) {
      console.error('生成饮食计划错误:', error);
      setError(error instanceof Error ? error.message : '生成饮食计划失败，请稍后重试');
    } finally {
      setIsGenerating(false);
    }
  };
  
  // 格式化日期显示
  const formatDate = (dateString: string | Date): string => {
    const date = new Date(dateString);
    return format(date, 'yyyy年MM月dd日', { locale: zhCN });
  };
  
  // 加载状态
  if (isLoading) {
    return (
      <div className="flex flex-col min-h-screen">
        <Header />
        <main className="flex-grow bg-gray-50 py-8 flex items-center justify-center">
          <div className="text-center">
            <svg className="animate-spin h-12 w-12 text-primary-500 mx-auto mb-4" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
              <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle>
              <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
            </svg>
            <p className="text-lg text-gray-600">加载中，请稍候...</p>
          </div>
        </main>
        <Footer />
      </div>
    );
  }
  
  // 错误状态
  if (error && !user) {
    return (
      <div className="flex flex-col min-h-screen">
        <Header />
        <main className="flex-grow bg-gray-50 py-8 flex items-center justify-center">
          <div className="text-center max-w-md mx-auto px-4">
            <svg className="h-16 w-16 text-red-500 mx-auto mb-4" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"></path>
            </svg>
            <h2 className="text-xl font-semibold text-gray-800 mb-2">出错了</h2>
            <p className="text-gray-600 mb-4">{error}</p>
            <Link href="/" className="btn-primary">
              返回首页
            </Link>
          </div>
        </main>
        <Footer />
      </div>
    );
  }
  
  return (
    <div className="flex flex-col min-h-screen">
      <Header />
      
      <main className="flex-grow bg-gray-50 py-8">
        <div className="container mx-auto px-4">
          {/* 用户信息卡片 */}
          {user && (
            <section className="mb-8">
              <div className="bg-white rounded-lg shadow-md p-6">
                <div className="flex flex-col md:flex-row md:items-center md:justify-between">
                  <div>
                    <h2 className="text-2xl font-semibold text-gray-800 mb-2">
                      👋 {user.name}，今天是 {formatDate(new Date())}
                    </h2>
                    <p className="text-gray-600">
                      您现在怀孕 <span className="font-semibold text-primary-600">{user.healthInfo.currentWeek}</span> 周，
                      预产期是 <span className="font-semibold text-primary-600">{formatDate(user.healthInfo.dueDate)}</span>
                    </p>
                  </div>
                  
                  <div className="mt-4 md:mt-0">
                    <button
                      className="btn-primary text-lg flex items-center justify-center"
                      onClick={generateNewPlan}
                      disabled={isGenerating}
                    >
                      {isGenerating ? (
                        <>
                          <svg className="animate-spin -ml-1 mr-2 h-5 w-5 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                            <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle>
                            <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                          </svg>
                          生成中...
                        </>
                      ) : (
                        <>
                          <svg className="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6"></path>
                          </svg>
                          获取今日食谱
                        </>
                      )}
                    </button>
                  </div>
                </div>
              </div>
            </section>
          )}
          
          {/* 标签页导航 */}
          <div className="mb-6 border-b border-gray-200">
            <nav className="-mb-px flex space-x-8">
              <button
                className={`py-4 px-1 border-b-2 font-medium text-sm ${
                  activeTab === 'today'
                    ? 'border-primary-500 text-primary-600'
                    : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'
                }`}
                onClick={() => setActiveTab('today')}
              >
                今日饮食
              </button>
              <button
                className={`py-4 px-1 border-b-2 font-medium text-sm ${
                  activeTab === 'week'
                    ? 'border-primary-500 text-primary-600'
                    : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'
                }`}
                onClick={() => setActiveTab('week')}
              >
                周计划
              </button>
              <button
                className={`py-4 px-1 border-b-2 font-medium text-sm ${
                  activeTab === 'stats'
                    ? 'border-primary-500 text-primary-600'
                    : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'
                }`}
                onClick={() => setActiveTab('stats')}
              >
                营养分析
              </button>
            </nav>
          </div>
          
          {/* 主要内容区域 */}
          {activeTab === 'today' && (
            <div>
              {error && (
                <div className="bg-red-50 border border-red-200 text-red-700 px-4 py-3 rounded mb-6">
                  <p>{error}</p>
                </div>
              )}
              
              {dietPlan ? (
                <div>
                  {/* 一日总览 */}
                  <section className="mb-8">
                    <h3 className="text-xl font-semibold text-gray-800 mb-4">一日总览</h3>
                    <div className="bg-white rounded-lg shadow-sm p-6">
                      <div className="grid grid-cols-2 md:grid-cols-5 gap-4">
                        <div className="text-center">
                          <div className="text-sm text-gray-500 mb-1">总热量</div>
                          <div className="text-xl font-semibold text-primary-700">{dietPlan.nutritionSummary.calories} 千卡</div>
                        </div>
                        <div className="text-center">
                          <div className="text-sm text-gray-500 mb-1">蛋白质</div>
                          <div className="text-xl font-semibold text-primary-700">{dietPlan.nutritionSummary.protein}g</div>
                        </div>
                        <div className="text-center">
                          <div className="text-sm text-gray-500 mb-1">脂肪</div>
                          <div className="text-xl font-semibold text-primary-700">{dietPlan.nutritionSummary.fat}g</div>
                        </div>
                        <div className="text-center">
                          <div className="text-sm text-gray-500 mb-1">碳水</div>
                          <div className="text-xl font-semibold text-primary-700">{dietPlan.nutritionSummary.carbs}g</div>
                        </div>
                        <div className="text-center">
                          <div className="text-sm text-gray-500 mb-1">纤维</div>
                          <div className="text-xl font-semibold text-primary-700">{dietPlan.nutritionSummary.fiber}g</div>
                        </div>
                      </div>
                    </div>
                  </section>
                  
                  {/* 餐食卡片 */}
                  <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
                    {/* 早餐 */}
                    <MealCard 
                      title="早餐" 
                      time="7:30 - 8:30" 
                      meal={dietPlan.breakfast} 
                    />
                    
                    {/* 上午加餐 */}
                    <MealCard 
                      title="上午加餐" 
                      time="10:00 - 10:30" 
                      meal={dietPlan.morningSnack} 
                    />
                    
                    {/* 午餐 */}
                    <MealCard 
                      title="午餐" 
                      time="12:00 - 13:00" 
                      meal={dietPlan.lunch} 
                    />
                    
                    {/* 下午加餐 */}
                    <MealCard 
                      title="下午加餐" 
                      time="15:30 - 16:00" 
                      meal={dietPlan.afternoonSnack} 
                    />
                    
                    {/* 晚餐 */}
                    <MealCard 
                      title="晚餐" 
                      time="18:00 - 19:00" 
                      meal={dietPlan.dinner} 
                    />
                  </div>
                </div>
              ) : (
                <div className="text-center py-20">
                  <p className="text-gray-500 mb-4">您还没有今日的饮食计划</p>
                  <button 
                    className="btn-primary"
                    onClick={generateNewPlan}
                    disabled={isGenerating}
                  >
                    {isGenerating ? '生成中...' : '获取今日食谱'}
                  </button>
                </div>
              )}
            </div>
          )}
          
          {activeTab === 'week' && (
            <div className="text-center py-12">
              <svg className="w-16 h-16 text-gray-300 mx-auto mb-4" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z"></path>
              </svg>
              <h3 className="text-lg font-medium text-gray-500 mb-2">周计划功能正在开发中</h3>
              <p className="text-gray-400">
                此功能将在下一版本中推出，敬请期待！
              </p>
            </div>
          )}
          
          {activeTab === 'stats' && (
            <div className="text-center py-12">
              <svg className="w-16 h-16 text-gray-300 mx-auto mb-4" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M9 19v-6a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2a2 2 0 002-2zm0 0V9a2 2 0 012-2h2a2 2 0 012 2v10m-6 0a2 2 0 002 2h2a2 2 0 002-2m0 0V5a2 2 0 012-2h2a2 2 0 012 2v14a2 2 0 01-2 2h-2a2 2 0 01-2-2z"></path>
              </svg>
              <h3 className="text-lg font-medium text-gray-500 mb-2">营养分析功能正在开发中</h3>
              <p className="text-gray-400">
                此功能将在下一版本中推出，敬请期待！
              </p>
            </div>
          )}
        </div>
      </main>
      
      <Footer />
    </div>
  );
}
